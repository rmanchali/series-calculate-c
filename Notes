http://www.codeproject.com/Articles/683942/An-Absolute-Beginners-Tutorial-for-understanding-E



Product[] products = new Product[] 
        { 
            new Product { Id = 1, Name = "Tomato Soup", Category = "Groceries", Price = 1 }, 
            new Product { Id = 2, Name = "Yo-yo", Category = "Toys", Price = 3.75M }, 
            new Product { Id = 3, Name = "Hammer", Category = "Hardware", Price = 16.99M } 
        };

 public IEnumerable<Product> GetAllProducts()
        {
            return products;
        }


[Route("Users/about")]  // attribute based routing

[HttpGet]

@Html.Partial("_LoginPartial")

// data annotations
[Required(ErrorMessage="Customer code is required")]
    public string CustomerCode
    {
        set;
        get;
    } 


public JsonResult getCustomer()
{
    Customer obj = new Customer();
    obj.CustomerCode = "1001";
    obj.CustomerName = "Shiv";
    return Json(obj,JsonRequestBehavior.AllowGet);
}


protected ICompanyRepository companyRepository = null;

public enum CustomerTypes
        {
            VeryImportantClient,
            ImportantClient,
            Client
        }

private Utils.CustomerTypes ParseEnum(string value)
        {
            return (Utils.CustomerTypes)Enum.Parse(typeof(Utils.CustomerTypes), value, true);
        }

public CustomerServiceMoq(ICompanyRepository companyrepo, ICustomerCreditService customerCreditService)
            : base(companyrepo, customerCreditService)
        {
            // should ideally use dependency injection here and an interface declared.
            this.companyRepository = companyrepo;
            this.customerCreditService = customerCreditService;
        }




[SetUp()]
        public void MyTestInitialize()
        {
            // should put this in config file 
             ObjUnityContainer = new UnityContainer();

        }

[TestCase(3, "Client", "FirstName", "LastName", "email@email.com")]
        public void AddImportantCustomer(int clientid, string clientname, string firstname, string lastname, string email)
        {

            // created a MOCK class CustomerServiceMoq because of static addcustomer call, rest of the code does not require this call.
            ObjUnityContainer.RegisterType<CustomerServiceMoq>();

            // Mock for REPO , get concrete implementation from IOC and send through.
            Mock<ICompanyRepository> comRepo = new Mock<ICompanyRepository>();
            comRepo.Setup(x => x.GetById(It.IsAny<int>())).Returns(new Company { Id = clientid, Name = clientname, Classification = 

(Classification)int.Parse("1234") });
            ObjUnityContainer.RegisterInstance<ICompanyRepository>(comRepo.Object);
            
            // Mock for WCF interface, get concrete implementation from IOC and send through.
            Mock<ICustomerCreditService> mockcustomercreditservice = new Mock<ICustomerCreditService>();
            mockcustomercreditservice.Setup(x => x.GetCreditLimit(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<DateTime>())).Returns(500);
            ObjUnityContainer.RegisterInstance<ICustomerCreditService>(mockcustomercreditservice.Object);


            CustomerService cs = ObjUnityContainer.Resolve<CustomerServiceMoq>(); 

            bool IsAdded = cs.AddCustomer(firstname, lastname, email, DateTime.Now.AddYears(-22), 1);
            Assert.AreEqual(true, true);
        }

        // Invalid data testing validations
        [TestCase("FirstName", "LastName", "email")]
        [TestCase("FirstName", "", "email@email.com")]
        [TestCase("", "LastName", "email@email.com")]
        public void AddCustomerValidation(string firstname, string lastname, string email)
        {

            // should put this in config file 
            //IUnityContainer ObjUnityContainer = new UnityContainer();
            ObjUnityContainer.RegisterType<CustomerService>();

            Mock<ICompanyRepository> comRepo = new Mock<ICompanyRepository>();
            comRepo.Setup(x => x.GetById(It.IsAny<int>())).Returns(new Company { Id = 1, Name = "ImportantClient", Classification = 

(Classification)int.Parse("1234") });
            ObjUnityContainer.RegisterInstance<ICompanyRepository>(comRepo.Object);

            // Mock for WCF interface, get concrete implementation from IOC and send through.
            Mock<ICustomerCreditService> mockcustomercreditservice = new Mock<ICustomerCreditService>();
            mockcustomercreditservice.Setup(x => x.GetCreditLimit(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<DateTime>())).Returns(500);
            ObjUnityContainer.RegisterInstance<ICustomerCreditService>(mockcustomercreditservice.Object);

            CustomerService cs = ObjUnityContainer.Resolve<CustomerService>();
            bool checkEmail = cs.AddCustomer("FirstName", "LastName", "email", DateTime.Now.AddYears(-22), 1);
            Assert.AreEqual(false, false);
        }


@model MVCWebApplication.ViewModel.Course_Students
@model IEnumerable<MVCWebApplication.Models.Student>
@model IEnumerable<Ranjan.BLL.Model.Customer>


@foreach(var item in Model.Students)
{ 
<h2> 
Student Id: @item.StudentId <br />
Student First Name: @item.FirstName <br />
Student Last Name: @item.LastName <br />
</h2>
    
}


container.RegisterType<ILogService, LogService>();
container.RegisterType<MyType>(new InjectionConstructor("My string here"));
myContainer.RegisterType<IEmployee, Employee>("Person-Non-Singleton");  


string[] Birds = { "Indigo Bunting", "Rose Breasted Grosbeak", "Robin", "House Finch", "Gold Finch", "Ruby Throated Hummingbird", "Rufous Hummingbird", "Downy Woodpecker" };

            var list = from b in Birds where b.StartsWith("R") select b;

            StringBuilder sb = new StringBuilder();

            foreach (string s in list)
            {
                sb.Append(s + Environment.NewLine);
            }
int[] myArray = new int[] {3,5,6,3,3,5};
            
